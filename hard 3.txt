public class CountDigitOne {
    public int countDigitOne(int n) {
        if (n <= 0) {
            return 0;
        }

        int count = 0;
        long factor = 1;  // To handle overflow, use long instead of int

        while (n / factor > 0) {
            long currentDigit = (n / factor) % 10;
            long higherDigits = n / (factor * 10);
            long lowerDigits = n % factor;

            if (currentDigit == 0) {
                count += higherDigits * factor;
            } else if (currentDigit == 1) {
                count += higherDigits * factor + lowerDigits + 1;
            } else {
                count += (higherDigits + 1) * factor;
            }

            factor *= 10;
        }

        return (int) count;
    }

    public static void main(String[] args) {
        // Example 1
        int n1 = 13;
        CountDigitOne solution = new CountDigitOne();
        System.out.println("Example 1: " + solution.countDigitOne(n1)); // Output: 6

        // Example 2
        int n2 = 0;
        System.out.println("Example 2: " + solution.countDigitOne(n2)); // Output: 0
    }
}
